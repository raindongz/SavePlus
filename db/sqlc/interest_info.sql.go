// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: interest_info.sql

package db

import (
	"context"
)

const createInterestRecord = `-- name: CreateInterestRecord :one
INSERT INTO interest_info (
  post_id,
  interested_user_id
) VALUES (
  $1, $2
) RETURNING id, post_id, interested_user_id, created_at, updated_at
`

type CreateInterestRecordParams struct {
	PostID           int64 `json:"post_id"`
	InterestedUserID int64 `json:"interested_user_id"`
}

func (q *Queries) CreateInterestRecord(ctx context.Context, arg CreateInterestRecordParams) (InterestInfo, error) {
	row := q.db.QueryRow(ctx, createInterestRecord, arg.PostID, arg.InterestedUserID)
	var i InterestInfo
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.InterestedUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteInterestRecord = `-- name: DeleteInterestRecord :exec
DELETE FROM interest_info
WHERE id = $1
`

func (q *Queries) DeleteInterestRecord(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteInterestRecord, id)
	return err
}

const getInterestList = `-- name: GetInterestList :many
SELECT id, post_id, interested_user_id, created_at, updated_at FROM interest_info 
WHERE post_id = $1
`

func (q *Queries) GetInterestList(ctx context.Context, postID int64) ([]InterestInfo, error) {
	rows, err := q.db.Query(ctx, getInterestList, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InterestInfo{}
	for rows.Next() {
		var i InterestInfo
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.InterestedUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
