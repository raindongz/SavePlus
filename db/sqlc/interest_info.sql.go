// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: interest_info.sql

package db

import (
	"context"
)

const createInterestRecord = `-- name: CreateInterestRecord :exec
INSERT INTO interest_info (
  post_id,
  interested_user_id
) VALUES (
  $1, $2
)
`

type CreateInterestRecordParams struct {
	PostID           int64 `json:"post_id"`
	InterestedUserID int64 `json:"interested_user_id"`
}

func (q *Queries) CreateInterestRecord(ctx context.Context, arg CreateInterestRecordParams) error {
	_, err := q.db.Exec(ctx, createInterestRecord, arg.PostID, arg.InterestedUserID)
	return err
}

const deleteInterestRecord = `-- name: DeleteInterestRecord :exec
DELETE FROM interest_info
WHERE id = $1
`

func (q *Queries) DeleteInterestRecord(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteInterestRecord, id)
	return err
}

const getInterestRecordByUserIdAndPostId = `-- name: GetInterestRecordByUserIdAndPostId :one
SELECT id 
FROM interest_info 
WHERE post_id = $1 AND interested_user_id = $2 LIMIT 1
`

type GetInterestRecordByUserIdAndPostIdParams struct {
	PostID           int64 `json:"post_id"`
	InterestedUserID int64 `json:"interested_user_id"`
}

func (q *Queries) GetInterestRecordByUserIdAndPostId(ctx context.Context, arg GetInterestRecordByUserIdAndPostIdParams) (int64, error) {
	row := q.db.QueryRow(ctx, getInterestRecordByUserIdAndPostId, arg.PostID, arg.InterestedUserID)
	var id int64
	err := row.Scan(&id)
	return id, err
}
