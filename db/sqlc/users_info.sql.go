// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users_info.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNewUser = `-- name: CreateNewUser :one
INSERT INTO users_info (
  username,
  hashed_password,
  full_name,
  email,
  phone,
  gender,
  avatar,
  deleted_flag
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, 0
) RETURNING id, username, hashed_password, full_name, email, phone, gender, avatar, deleted_flag, password_changed_at, created_at, updated_at
`

type CreateNewUserParams struct {
	Username       string      `json:"username"`
	HashedPassword string      `json:"hashed_password"`
	FullName       string      `json:"full_name"`
	Email          string      `json:"email"`
	Phone          pgtype.Text `json:"phone"`
	Gender         int16       `json:"gender"`
	Avatar         pgtype.Text `json:"avatar"`
}

func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) (UsersInfo, error) {
	row := q.db.QueryRow(ctx, createNewUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.Phone,
		arg.Gender,
		arg.Avatar,
	)
	var i UsersInfo
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.Avatar,
		&i.DeletedFlag,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
Update users_info
SET
    deleted_flag = 1
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, hashed_password, full_name, email, phone, gender, avatar, deleted_flag, password_changed_at, created_at, updated_at FROM users_info
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (UsersInfo, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i UsersInfo
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.Avatar,
		&i.DeletedFlag,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, hashed_password, full_name, email, phone, gender, avatar, deleted_flag, password_changed_at, created_at, updated_at FROM users_info 
WHERE id = $1 and deleted_flag = 0 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (UsersInfo, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i UsersInfo
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.Avatar,
		&i.DeletedFlag,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserInfo = `-- name: UpdateUserInfo :one
UPDATE users_info
SET 
  username = $2,
  full_name = $3,
  email = $4,
  phone = $5,
  avatar = $6
WHERE id = $1
RETURNING id, username, hashed_password, full_name, email, phone, gender, avatar, deleted_flag, password_changed_at, created_at, updated_at
`

type UpdateUserInfoParams struct {
	ID       int64       `json:"id"`
	Username string      `json:"username"`
	FullName string      `json:"full_name"`
	Email    string      `json:"email"`
	Phone    pgtype.Text `json:"phone"`
	Avatar   pgtype.Text `json:"avatar"`
}

func (q *Queries) UpdateUserInfo(ctx context.Context, arg UpdateUserInfoParams) (UsersInfo, error) {
	row := q.db.QueryRow(ctx, updateUserInfo,
		arg.ID,
		arg.Username,
		arg.FullName,
		arg.Email,
		arg.Phone,
		arg.Avatar,
	)
	var i UsersInfo
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.Avatar,
		&i.DeletedFlag,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
