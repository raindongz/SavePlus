// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: post_info.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNewPost = `-- name: CreateNewPost :one
INSERT INTO post_info (
title,
content,
total_price,
post_user_id,
delivery_type,
area,
item_num,
post_status,
negotiable,
images,
deleted_flag
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, 0
) RETURNING id, title, content, total_price, post_user_id, delivery_type, area, item_num, post_status, negotiable, images, deleted_flag, created_at, updated_at
`

type CreateNewPostParams struct {
	Title        string      `json:"title"`
	Content      string      `json:"content"`
	TotalPrice   string      `json:"total_price"`
	PostUserID   int64       `json:"post_user_id"`
	DeliveryType int16       `json:"delivery_type"`
	Area         pgtype.Text `json:"area"`
	ItemNum      int32       `json:"item_num"`
	PostStatus   int16       `json:"post_status"`
	Negotiable   int16       `json:"negotiable"`
	Images       string      `json:"images"`
}

func (q *Queries) CreateNewPost(ctx context.Context, arg CreateNewPostParams) (PostInfo, error) {
	row := q.db.QueryRow(ctx, createNewPost,
		arg.Title,
		arg.Content,
		arg.TotalPrice,
		arg.PostUserID,
		arg.DeliveryType,
		arg.Area,
		arg.ItemNum,
		arg.PostStatus,
		arg.Negotiable,
		arg.Images,
	)
	var i PostInfo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.TotalPrice,
		&i.PostUserID,
		&i.DeliveryType,
		&i.Area,
		&i.ItemNum,
		&i.PostStatus,
		&i.Negotiable,
		&i.Images,
		&i.DeletedFlag,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
UPDATE post_info
SET
  deleted_flag = 1
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, title, content, total_price, post_user_id, delivery_type, area, item_num, post_status, negotiable, images, deleted_flag, created_at, updated_at FROM post_info 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int64) (PostInfo, error) {
	row := q.db.QueryRow(ctx, getPost, id)
	var i PostInfo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.TotalPrice,
		&i.PostUserID,
		&i.DeliveryType,
		&i.Area,
		&i.ItemNum,
		&i.PostStatus,
		&i.Negotiable,
		&i.Images,
		&i.DeletedFlag,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostList = `-- name: GetPostList :many
SELECT id, title, content, total_price, post_user_id, delivery_type, area, item_num, post_status, negotiable, images, deleted_flag, created_at, updated_at FROM post_info
WHERE 
    deleted_flag = 0
ORDER BY updated_at desc
LIMIT $1
OFFSET $2
`

type GetPostListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPostList(ctx context.Context, arg GetPostListParams) ([]PostInfo, error) {
	rows, err := q.db.Query(ctx, getPostList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PostInfo{}
	for rows.Next() {
		var i PostInfo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.TotalPrice,
			&i.PostUserID,
			&i.DeliveryType,
			&i.Area,
			&i.ItemNum,
			&i.PostStatus,
			&i.Negotiable,
			&i.Images,
			&i.DeletedFlag,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE post_info
SET 
title = $2,
content = $3,
total_price = $4,
post_user_id = $5,
delivery_type = $6,
area = $7,
item_num = $8,
post_status = $9,
negotiable = $10,
images = $11
WHERE id = $1
RETURNING id, title, content, total_price, post_user_id, delivery_type, area, item_num, post_status, negotiable, images, deleted_flag, created_at, updated_at
`

type UpdatePostParams struct {
	ID           int64       `json:"id"`
	Title        string      `json:"title"`
	Content      string      `json:"content"`
	TotalPrice   string      `json:"total_price"`
	PostUserID   int64       `json:"post_user_id"`
	DeliveryType int16       `json:"delivery_type"`
	Area         pgtype.Text `json:"area"`
	ItemNum      int32       `json:"item_num"`
	PostStatus   int16       `json:"post_status"`
	Negotiable   int16       `json:"negotiable"`
	Images       string      `json:"images"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (PostInfo, error) {
	row := q.db.QueryRow(ctx, updatePost,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.TotalPrice,
		arg.PostUserID,
		arg.DeliveryType,
		arg.Area,
		arg.ItemNum,
		arg.PostStatus,
		arg.Negotiable,
		arg.Images,
	)
	var i PostInfo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.TotalPrice,
		&i.PostUserID,
		&i.DeliveryType,
		&i.Area,
		&i.ItemNum,
		&i.PostStatus,
		&i.Negotiable,
		&i.Images,
		&i.DeletedFlag,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
