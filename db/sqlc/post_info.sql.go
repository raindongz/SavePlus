// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: post_info.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNewPost = `-- name: CreateNewPost :one
INSERT INTO post_info (
title,
content,
total_price,
post_user_id,
delivery_type,
area,
item_num,
post_status,
negotiable,
images,
deleted_flag
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, 0
) RETURNING id, title, content, total_price, post_user_id, delivery_type, area, item_num, post_status, negotiable, images, deleted_flag, created_at, updated_at
`

type CreateNewPostParams struct {
	Title        string      `json:"title"`
	Content      string      `json:"content"`
	TotalPrice   string      `json:"total_price"`
	PostUserID   int64       `json:"post_user_id"`
	DeliveryType int16       `json:"delivery_type"`
	Area         pgtype.Text `json:"area"`
	ItemNum      int32       `json:"item_num"`
	PostStatus   int16       `json:"post_status"`
	Negotiable   int16       `json:"negotiable"`
	Images       string      `json:"images"`
}

func (q *Queries) CreateNewPost(ctx context.Context, arg CreateNewPostParams) (PostInfo, error) {
	row := q.db.QueryRow(ctx, createNewPost,
		arg.Title,
		arg.Content,
		arg.TotalPrice,
		arg.PostUserID,
		arg.DeliveryType,
		arg.Area,
		arg.ItemNum,
		arg.PostStatus,
		arg.Negotiable,
		arg.Images,
	)
	var i PostInfo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.TotalPrice,
		&i.PostUserID,
		&i.DeliveryType,
		&i.Area,
		&i.ItemNum,
		&i.PostStatus,
		&i.Negotiable,
		&i.Images,
		&i.DeletedFlag,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
UPDATE post_info
SET
  deleted_flag = 1
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, title, content, total_price, post_user_id, delivery_type, area, item_num, post_status, negotiable, images, deleted_flag, created_at, updated_at FROM post_info
WHERE id = $1 and deleted_flag = 0 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int64) (PostInfo, error) {
	row := q.db.QueryRow(ctx, getPost, id)
	var i PostInfo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.TotalPrice,
		&i.PostUserID,
		&i.DeliveryType,
		&i.Area,
		&i.ItemNum,
		&i.PostStatus,
		&i.Negotiable,
		&i.Images,
		&i.DeletedFlag,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostAndRelatedUser = `-- name: GetPostAndRelatedUser :one
SELECT
pi.id as postId,
pi.title ,
pi.content,
pi.total_price,
pi.post_user_id,
pi.delivery_type,
pi.area,
pi.item_num,
pi.post_status,
pi.negotiable,
pi.images,
pi.created_at,
pi.updated_at,

ui.id as user_id,
ui.full_name,
ui.email,
ui.phone,
ui.gender,
ui.avatar
from post_info pi left join users_info ui on pi.post_user_id = ui.id
WHERE pi.id = $1 and pi.deleted_flag = 0 and ui.deleted_flag = 0
`

type GetPostAndRelatedUserRow struct {
	Postid       int64       `json:"postid"`
	Title        string      `json:"title"`
	Content      string      `json:"content"`
	TotalPrice   string      `json:"total_price"`
	PostUserID   int64       `json:"post_user_id"`
	DeliveryType int16       `json:"delivery_type"`
	Area         pgtype.Text `json:"area"`
	ItemNum      int32       `json:"item_num"`
	PostStatus   int16       `json:"post_status"`
	Negotiable   int16       `json:"negotiable"`
	Images       string      `json:"images"`
	CreatedAt    pgtype.Date `json:"created_at"`
	UpdatedAt    pgtype.Date `json:"updated_at"`
	UserID       pgtype.Int8 `json:"user_id"`
	FullName     pgtype.Text `json:"full_name"`
	Email        pgtype.Text `json:"email"`
	Phone        pgtype.Text `json:"phone"`
	Gender       pgtype.Int2 `json:"gender"`
	Avatar       pgtype.Text `json:"avatar"`
}

func (q *Queries) GetPostAndRelatedUser(ctx context.Context, id int64) (GetPostAndRelatedUserRow, error) {
	row := q.db.QueryRow(ctx, getPostAndRelatedUser, id)
	var i GetPostAndRelatedUserRow
	err := row.Scan(
		&i.Postid,
		&i.Title,
		&i.Content,
		&i.TotalPrice,
		&i.PostUserID,
		&i.DeliveryType,
		&i.Area,
		&i.ItemNum,
		&i.PostStatus,
		&i.Negotiable,
		&i.Images,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.Avatar,
	)
	return i, err
}

const getPostInterestList = `-- name: GetPostInterestList :many
select
ii.id as record_id,
ui.id as user_id,
ui.username,
ui.avatar,
ui.gender
from interest_info ii left join users_info ui on ii.interested_user_id = ui.id
where ii.post_id = $1 and ui.deleted_flag = 0
`

type GetPostInterestListRow struct {
	RecordID int64       `json:"record_id"`
	UserID   pgtype.Int8 `json:"user_id"`
	Username pgtype.Text `json:"username"`
	Avatar   pgtype.Text `json:"avatar"`
	Gender   pgtype.Int2 `json:"gender"`
}

func (q *Queries) GetPostInterestList(ctx context.Context, postID int64) ([]GetPostInterestListRow, error) {
	rows, err := q.db.Query(ctx, getPostInterestList, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPostInterestListRow{}
	for rows.Next() {
		var i GetPostInterestListRow
		if err := rows.Scan(
			&i.RecordID,
			&i.UserID,
			&i.Username,
			&i.Avatar,
			&i.Gender,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostListAuth = `-- name: GetPostListAuth :many
SELECT p.id as post_id,
       p.title as post_title,
       p.content as post_content,
       p.images as post_images,
       p.total_price as price,
       p.area,
       i.id as liked

FROM post_info p
    left join interest_info i on i.interested_user_id = $1 AND p.id = i.post_id
WHERE
    p.deleted_flag = 0
ORDER BY p.updated_at desc
LIMIT $2
OFFSET $3
`

type GetPostListAuthParams struct {
	InterestedUserID int64 `json:"interested_user_id"`
	Limit            int32 `json:"limit"`
	Offset           int32 `json:"offset"`
}

type GetPostListAuthRow struct {
	PostID      int64       `json:"post_id"`
	PostTitle   string      `json:"post_title"`
	PostContent string      `json:"post_content"`
	PostImages  string      `json:"post_images"`
	Price       string      `json:"price"`
	Area        pgtype.Text `json:"area"`
	Liked       pgtype.Int8 `json:"liked"`
}

func (q *Queries) GetPostListAuth(ctx context.Context, arg GetPostListAuthParams) ([]GetPostListAuthRow, error) {
	rows, err := q.db.Query(ctx, getPostListAuth, arg.InterestedUserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPostListAuthRow{}
	for rows.Next() {
		var i GetPostListAuthRow
		if err := rows.Scan(
			&i.PostID,
			&i.PostTitle,
			&i.PostContent,
			&i.PostImages,
			&i.Price,
			&i.Area,
			&i.Liked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostListNoAuth = `-- name: GetPostListNoAuth :many
SELECT id, title, content, total_price, post_user_id, delivery_type, area, item_num, post_status, negotiable, images, deleted_flag, created_at, updated_at FROM post_info
WHERE 
    deleted_flag = 0
ORDER BY updated_at desc
LIMIT $1
OFFSET $2
`

type GetPostListNoAuthParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPostListNoAuth(ctx context.Context, arg GetPostListNoAuthParams) ([]PostInfo, error) {
	rows, err := q.db.Query(ctx, getPostListNoAuth, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PostInfo{}
	for rows.Next() {
		var i PostInfo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.TotalPrice,
			&i.PostUserID,
			&i.DeliveryType,
			&i.Area,
			&i.ItemNum,
			&i.PostStatus,
			&i.Negotiable,
			&i.Images,
			&i.DeletedFlag,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const soldPost = `-- name: SoldPost :exec
UPDATE post_info
SET
  post_status = 1
WHERE id = $1
`

func (q *Queries) SoldPost(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, soldPost, id)
	return err
}

const updatePost = `-- name: UpdatePost :one
UPDATE post_info
SET 
title = $2,
content = $3,
total_price = $4,
delivery_type = $5,
area = $6,
item_num = $7,
post_status = $8,
negotiable = $9,
images = $10
WHERE id = $1 and deleted_flag = 0
RETURNING id, title, content, total_price, post_user_id, delivery_type, area, item_num, post_status, negotiable, images, deleted_flag, created_at, updated_at
`

type UpdatePostParams struct {
	ID           int64       `json:"id"`
	Title        string      `json:"title"`
	Content      string      `json:"content"`
	TotalPrice   string      `json:"total_price"`
	DeliveryType int16       `json:"delivery_type"`
	Area         pgtype.Text `json:"area"`
	ItemNum      int32       `json:"item_num"`
	PostStatus   int16       `json:"post_status"`
	Negotiable   int16       `json:"negotiable"`
	Images       string      `json:"images"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (PostInfo, error) {
	row := q.db.QueryRow(ctx, updatePost,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.TotalPrice,
		arg.DeliveryType,
		arg.Area,
		arg.ItemNum,
		arg.PostStatus,
		arg.Negotiable,
		arg.Images,
	)
	var i PostInfo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.TotalPrice,
		&i.PostUserID,
		&i.DeliveryType,
		&i.Area,
		&i.ItemNum,
		&i.PostStatus,
		&i.Negotiable,
		&i.Images,
		&i.DeletedFlag,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
